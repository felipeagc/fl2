entity :: import "entity.fl";
using entity;

using import "tests/c.fl";

MyStruct :: struct {

}

MyStructAlias :: (MyStruct);

asd :: proc (c: i32) -> i32 {
  d := 123;

  return c;
}

MyProcType :: proc* () -> i32;

global := 123;

MyInt :: i64;
MyInt32 :: i32;

BigConstant :: 123123123;

fun_alias :: asd;

ConstString :: c"Hello";

caller :: proc (callback: proc* (i32) -> i32) -> i32 {
  return callback(123);
}

main :: proc () {
  str2 := ConstString;

  other :: (import "other.fl");

  str := c"asd";

  size32: i32 = @sizeof(str);
  size: i64 = @sizeof(str);
  printf(c"size of *u8: %ld\n", size);
  printf(c"size of i32: %ld\n", @sizeof(i32));
  printf(c"size of i8: %ld\n", @sizeof(i8));

  bignum := BigConstant;

  global = bignum;
  global = 123;

  bb: i64 = (other.sum(1, 2));
  bb = 123;

  xyz := fun_alias(123);

  other_asd : proc* (i32) -> i32 = asd;
  ret := other_asd(123);

  value := caller(asd);

  a: i64 : 123;
  myint: MyInt = a;
  bbbbbb : i64 = a;

  aa : MyInt = 123;

  int32: i32 = 123;

  other_const :: 123;
  some_const :: other_const;

  void_proc :: proc () {}

  fun_ptr := other.sum;

  fun_ptr(1, 2);

  my_i32: i32;

  my_f32: f32 = 1.23;
  my_f64: f64 = 1.23;

  my_f32 = 123;

  my_i64: i64;
  e1: entity.Entity;
  e2: Entity;
  e3: Entity;
  e4: Entity;

  asd(123);

  derp :: proc () -> i32 {
    aaa :: other.sum;
    some_int :: 123;
    b := other.sum(some_int, 2);
    b = 123;

    asdf := global;

    return 123;
  }

  other_fun_ptr: proc* () -> i32 = derp;
  my_proc: MyProcType = derp;

  derp();

  aaa := derp();

  puts(c"Hello");

  addr := &derp;
  deref : proc*() -> i32 = *addr;
  xx := deref();

  ia : *i32 = &123;
  ai32 := *ia;
  ai32 = derp();

  hello_str := c"Hello";
  ch := *hello_str;
  ch = *c"hey";

  {
    puts(c"hello" " world");
  }

  ARR_SIZE :: 123;
  array: [ARR_SIZE][12]i32;
  array[0][0] = 123;
  array[1][0] = 321;
  printf(c"%d\n", array[0][0]);
  printf(c"%d\n", array[1][0]);
  printf(c"%d\n", array[2][0]);

  arr := []i32{ 1, 2, 3 };
  printf(c"%d\n", arr[1]);
}
